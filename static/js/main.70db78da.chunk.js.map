{"version":3,"sources":["Components/Header/Header.js","seed.js","Components/Home/Home.js","Components/AddContact/AddContact.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","data","contacts","Home","state","seed","_this2","this","Link","to","Button","variant","map","contact","index","name","phone","onClick","splice","setState","Component","AddContact","type","value","onChange","event","target","push","App","BrowserRouter","Components_Header_Header","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70db78da.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header=(props)=>{\r\nreturn(\r\n<header className=\"App-header\">\r\n          <center>PHONE DIRECTORY</center>\r\n</header>\r\n);\r\n}\r\nexport default Header;","const data={contacts:[]\r\n}\r\n\r\nexport default data;","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport {Link } from \"react-router-dom\";\r\nimport seed from '../../seed'\r\n\r\nclass Home extends Component {\r\n  state={\r\n    contacts:seed.contacts,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <Link to='/add'><Button variant=\"primary\" className=\"addButton\"><span className=\"buttonHead\"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></Button></Link>\r\n\r\n        <br/>\r\n\r\n        <table className=\"table\">\r\n        <tbody>\r\n          <tr>\r\n            <th>NAME</th>\r\n            <th className=\"tableContent\">PHONE</th>\r\n            <th className=\"tableContent\"></th>\r\n          </tr>\r\n          {seed.contacts.map((contact,index)=>{\r\n            return(\r\n            <tr>\r\n            <td>{contact.name}</td>\r\n            <td className=\"tableContent\">{contact.phone}</td>\r\n            <td className=\"tableContent\"><Button variant=\"primary\" className=\"deleteButton\" onClick={(index)=>{\r\n\r\n              seed.contacts.splice(index,1)\r\n              \r\n              this.setState({contacts:seed.contacts})\r\n              \r\n            }}><span className=\"buttonHead\"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DELETE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></Button></td>\r\n          </tr>);\r\n          })}\r\n        </tbody>\r\n        </table>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport {Link } from \"react-router-dom\";\r\nimport { Button } from 'react-bootstrap';\r\nimport './AddContact.css'\r\nimport seed from '../../seed'\r\n\r\nclass AddContact extends Component{\r\n\tstate={\r\n\t\tcontact:{\r\n\t\tname:\"\",\r\n\t\tphone:\"\"\r\n\t}\r\n\t}\r\nrender(){\r\nreturn(\r\n<div>\r\n<br/>\r\n<br/>\r\n<Link to='/'><span className=\"link\">BACK</span></Link>\r\n<br/>\r\n<br/>\r\n<form className=\"form\">\r\n\t<label>Name:</label><br/>\r\n\t<input type='text' value={this.state.contact.name} onChange={(event)=>{\r\n\t\tconst name=event.target.value;\r\n\t\tthis.setState({\r\n\t\t\tcontact:{name:name,phone:this.state.contact.phone}\r\n\t\t})\r\n\t}}/><br/><br/>\r\n\t<label>Phone:</label><br/>\r\n\t<input type='text'  value={this.state.contact.phone} onChange={(event)=>{\r\n\t\tconst phone=event.target.value;\r\n\t\tthis.setState({\r\n\t\t\tcontact:{name:this.state.contact.name,phone:phone}\r\n\t\t})\r\n\t}}/><br/><br/>\r\n\t<Button variant=\"primary\" className=\"addButton1\" onClick={()=>{\r\n\t\tseed.contacts.push(this.state.contact);\r\n\t\tconst contact={name:\"\",phone:\"\"};\r\n\t\tthis.setState({contact:contact})\r\n\t}}><span className=\"buttonHead\" ><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></Button>\r\n</form>\r\n<br/><br/>\r\n<div className=\"twoWayBindingContent\">\r\n<h3>Subscribers to be added</h3>\r\nName:&nbsp;{this.state.contact.name}<br/><br/>\r\nPhone:&nbsp;{this.state.contact.phone}\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default AddContact;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Home from './Components/Home/Home';\nimport AddContact from './Components/AddContact/AddContact'\nimport {BrowserRouter,Route } from \"react-router-dom\";\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Header/>\n          <Route path='/add' component={AddContact}/>\n          <Route exact path='/' component={Home}/>\n        </div>  \n        </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}